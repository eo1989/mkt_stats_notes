---
title: "Think Bayes Ch1 Notes"
author: "Ernest Orlowski"
date: "05/24/2023"
editor:
  render-on-save: true
format:
  html:
    code-folding: true
    html-math-method: katex
# execute:
#   enabled: true
#   keep-ipynb: true
jupyter: python3
---

# Conditional probability utilizing Bayes theorem
## Probability:

-   A probability is a fraction of a finite set.
-   ex: survey 1000 people, and 20 of them are bank tellers, the fraction shows that bank tellers are 2%, or 0.02 of the population. Chosing a random person out of this population would have a 2% chance of being a bank teller.

Using GSS (General Social Survey) data here use pandas to read the data and extract the columns we need.

```{python}
import pandas as pd

pd.set_option('display.float_format', '{:.3f}'.format)

gss = pd.read_csv('ThinkBayes2/data/gss_bayes.csv', index_col=0)
gss.head()
```

| columns    | description                                   |
|:-----------|:----------------------------------------------|
| 'caseid'   | Respondent ID (index of the table)            |
| 'year'     | Year when respondent was surveyed             |
| 'age'      | respondents age                               |
| 'sex'      | Male or female                                |
| 'polviews' | Political views on a range from lib to cons   |
| 'partyid'  | Political party affiliation                   |
| 'indus10'  | code for the industry the respondent works in |

### Fraction of Bankers:

The code for "Banking and related activities" is 6870, so select them:

```{python}
banker = (gss['indus10'] == 6870)
banker.head()
```

Sum up the series, itll treat True as 1 and False as 0, so the sum is the number of bankers:

```{python}
banker.sum()  # 728 bankers
banker.mean()  # 0.014769 ~1.5%


```

There are 728 bankers in the respondents sample, choosing a random person from the sample would have a 1.5% chance of being a banker.

### Probability Function:

A probability function maps from each hypothesis to its probability. In this case, the hypothesis is whether the respondent is a banker or not. The probability function is a map from True to 0.015 and False to 0.985.

```{python}
def prob(A):
    return A.mean()


prob(banker)  # 0.014769 ~1.5%
```

Looking at other variables:

```{python}
female = (gss['sex'] == 2)
prob(female)  # 0.537857 ~54%

# Political Views:

democrat = (gss['partyid'] <= 1)
prob(democrat)  # 0.36626 ~37%

```

### Conjunction:

-   Another name for the logical `and` operation. If you have two *propositions*, A and B, the conjunction A and B is True if both A and B are true, and False otherwise.
-   With two boolean series use the `&` operator to compute their conjunction.

```{python .wrap-on}
prob(banker & democrat)  # 0.004686 ~0.5%
prob(democrat & banker)  # 0.004686 ~0.5%

liberal = (gss['polviews'] <= 3)
print(prob(liberal))  # 0.27 ~27%

# Conditional Probaility (Not commutative)
selected = democrat[liberal]
print(prob(selected))  # 0.52 ~52%
# selected contains the values of democrat for liberal respondents
# so prob(selected) is the fraction of liberals who are dems.

selected = female[banker]
print(prob(selected))  # 0.77 ~77%


def conditional(proposition, given):
    """Conditional probability of proposition given given."""
    return prob(proposition[given])


print(conditional(liberal, given=female))  # 0.2758 ~27.5%
```

note: above includes the keyword "given", along with the parameter, female, makes expression more readable.

Conjunction is commutative; that is, prob(A & B) is always = prob(B & A). But conditional probability is not commutative; in general, conditional(A, B) is not the same as conditional(B, A).

```{python}
print(conditional(female, given=banker))  # 0.77 ~77%
print(conditional(banker, given=female))  # 0.02 ~2%

print(conditional(female, given=liberal & democrat))  # 0.576 ~57.6%
```

### Laws of probability:

-   Theorem 1: Using a conjunction to compute a conditional probability.
-   Theorem 2: Using a conditional probability to compute a conjunction.
-   Theorem 3: Using the law of total probability to compute a conjunction.
    -   Using conditional(A, B) to compute conditional(B, A)

Theorem 3 is colloquilally known as **Bayes' Theorem**. $$ P(A|B) = \frac{P(A)P(B|A)}{P(B)} $$

Mathematically: \* P(A) is the probability of proposition A. \* P(A and B) is the probability of the conjunction of A and B, the probability that both are true. \* P(A\|B) is the *conditional probability* of A **given that** B is true.

#### Theorem 1:

$$ P(A|B) = \frac{P(A \text{ and } B)}{P(B)} $$

```{python}
female[banker].mean()  # 0.77 ~77%

print(
    f"conditional female, given banker: {conditional(female, given = banker)}"
)  # 0.77 ~77%
# of all the bankers, what fraction are female bankers?
print(f"{prob(female & banker) / prob(banker)}")
```

#### Theorem 2:

$$ P(A \text{ and } B) = P(B)P(A|B) $$

```{python}
print(prob(liberal & democrat))  # 0.14  ~14%

print(prob(democrat) * conditional(liberal, democrat))  # same
```

#### Theorem 3:

$$ P(A \text{ and } B) = P(B \text{ and } A) $$ Apply theorem 2 to both sides: $$P(B)P(A|B) = P(A)P(B|A)$$ Divide both sides by P(B): $$ P(A|B) = \frac{P(A)P(B|A)}{P(B)} $$

```{python}
print(conditional(liberal, given=banker))

print(prob(liberal) * conditional(banker, liberal) / prob(banker))
```

#### Law of Total Probability
$$ P(A) = P(B_1 \text{ and } A) + P(B_2 \text{ and } A) $$

Total probability of A is the sum of two possiblities: either B_1 and A are true or B_2 and A are true. Only applying if B_1 and B_2 are:

* Mutually exclusive: Only one of them can be true.
* Collectively exhaustive: One of them must be true.

```{python}
print(f"1: {print(prob(banker))}")
male = (gss['sex'] == 1)
print(f"2: {prob(male & banker) + prob(female & banker)}")

print(f"3: {prob(banker) == prob(female & banker) + prob(male & banker)}"
      )  # true
```
Because male and female are mutually excluse and collectively exhaustive (MECE), you get the same result by computing probability of banker directly.

Applying theorem 2 to both sides of the law of total probability, we get:
$$ P(A) = P(B_1)P(A|B_1) + P(B_2)P(A|B_2) $$

<!-- test it -->

```{python}
(prob(male) * conditional(banker, given=male) +
 prob(female) * conditional(banker, given=female))
```

When there are more than two conditions, it's more concise to write the law of total probability as a summation:
$$ P(A) = \sum_{i}{P(B_i)P(A|B_i)} $$

This holds as long as conditions B_i are mutually exclusive and collectively exhaustive.
Consider polviews, with seven different values:
```{python}
B = gss['polviews']
B.value_counts().sort_index()
```
On this scale, 4.0 represents "Moderate", computing the probability of a moderate banker:
```{python}
i = 4
prob(B == i) * conditional(banker, B == i)  # 0.00582 ~0.6%
```

Using sum and a 'generator expression' to compute the summation:
```{python}
print(
    f"{sum(prob(B == i) * conditional(banker, B == i) for i in range(1, 8)):.2g}"
)  # 0.014769 ~1.47%, same result
```

### Exercises:
[Exercise 1-1]{style="text-decoration: underline;"}

Let’s use the tools in this chapter to solve a variation of the Linda problem.
Linda is 31 years old, single, outspoken, and very bright. She majored in philosophy.
As a student, she was deeply concerned with issues of discrimination and social justice,
and also participated in anti-nuclear demonstrations. Which is more probable?
1.  Linda is a banker.
2.  Linda is a banker and considers herself a liberal Democrat.
    To answer this question, compute:
        •  The probability that Linda is a female banker,
        •  The probability that Linda is a liberal female banker, and
        •  The probability that Linda is a liberal female banker and a Democrat.

#### Solution:
```{python}
# The probability that Linda is a female banker,
print(f"1. {prob(female & banker):.3f}")
# The probability that Linda is a liberal female banker, and
print(f"2. {prob(female & banker & liberal):.3g}")
# The probability that Linda is a liberal female banker and a Democrat.
print(f"3. {prob(female & banker & liberal & democrat):.3g}")
```
[Exercise 1-2]{style="text-decoration: underline;"}

Use `conditional` to compute the following probabilities:

- What is the probability that a respondent is liberal, given that they are a Democrat?
- What is the probability that a respondent is a Democrat, given that they are liberal?
```{python}
print(f"{conditional(liberal, given = democrat):.3g}")
print(f"{conditional(democrat, given = liberal):.3g}")
```
[Exercise 1-3]{style="text-decoration: underline;"}

There’s a famous quote about young people, old people, liberals, and conservatives
that goes something like:

    If you are not a liberal at 25, you have no heart. If you are not a conservative at 35,
    you have no brain.

Whether you agree with this proposition or not, it suggests some probabilities we can
compute as an exercise. Rather than use the specific ages 25 and 35, let’s define young
and old as under 30 or over 65:
```{python}
young = (gss['age'] < 30)
old = (gss['age'] >= 65)
print(f"proability <30: {prob(young):.3f}, >=65: {prob(old):.3f}")
```
For those thresholds round numbers near the 20^{th} and 80^{th} percentiles were chosen.
Depending on your age, you might or might not agree with these definitions of young and old.
Defining a "conservative" as someone whose political views are "Conserivative", "Slightly Conservative", or "Extremely Conservative".
```{python}
conservative = (gss['polviews'] >= 5)
print(f"{prob(conservative):.3f}")
```
Use prob and conditional to compute the following probabilities:

1.  What is the probability that a randomly chosen respondent is a young liberal?
2.  What is the probability that a young person is liberal?
3.  What fraction of respondents are old conservatives?
4.  What fraction of conservatives are old?

For each statement, think about whether it is expressing a conjunction, a conditional
probability, or both.
For the conditional probabilities, be careful about the order of the arguments. If your
answer to the last question is greater than 30%, you have it backwards!
```{python}
print(f"1. {prob(young & liberal):.3g}")
print(f"2. {conditional(liberal, given = young):.3g}")
print(f"3. {prob(old & conservative):.3g}")
print(
    f"4. {conditional(old, given = conservative):.3g}, {conditional(old, given = conservative) * 100:.3g}%"
)
```