---
title: "Essentials of Options Trading (IV & Greeks)"
date: "06/25/2023"
author: "Ernest Orlowski"
format:
  html:
    code-folding: true
  pdf:
    toc: true
    number-selections: true
    colorlinks: true
jupyter: WinPy3.12sys
execute:
  enabled: true
  freeze: auto  # re-render only when source changes
fig-cap-location: margin
reference-location: margin
---
```{python}
import numpy as np
from numpy import ma
import matplotlib.pyplot as plt
import pandas as pd
from itertools import product
from scipy import stats
from scipy.optimize import newton
```
Using data from ![data](../data/option_sample_data.csv) the following code will be used to calculate everything needed in this demo.

# Refresher:
$$
\begin{aligned}
& \diamondsuit \text{BSM Formula} \diamondsuit \\
& C = S_{0}\phi(d_{1})- e^{-rT}K\phi(d_{2}) \\
& P = e^{-rT}K\phi(-d_{2})-S_{0}\phi(-d_{1}) \\
& \text{where:} \\
& d_{1} = \frac{1}{\sigma\sqrt{T}}\big(ln\frac{S_{0}}{K}+(r+\frac{\sigma^{2}}{2})T), \\
& d_{2} = \frac{1}{\sigma\sqrt{T}}\big(ln\frac{S_{0}}{K}+(r-\frac{\sigma^{2}}{2})T) \\
\end{aligned}
$$
It is one of the fastest formulas used to estimate the approximate premium of an option. The code to create it is:
```{python}
'''Std Norm Distribution function && Density'''
_Phi = stats.norm.cdf
_phi = stats.norm.pdf

"""
Notation:
	v: option price
	k: strike
	x: price of underlying stock/asset
	tau: time to expiry
	r: interest rate
	sigma: volatility of underlying
"""

def bs_d1(k, x, tau, sigma, r = 0):
	return 1/(sigma*np.sqrt(tau)) * (np.log(x/k) + (r + sigma**2/2)*tau)

def bs_d2(k, x, tau, sigma, r = 0):
	return bs_d1(k, x, tau, sigma, r) - sigma*np.sqrt(tau)

def call_price(k, x, tau, sigma, r = 0):
	return _Phi(bs_d1(k, x, tau, sigma, r))*x - _Phi(bs_d2(k, x, tau, sigma, r))*k*np.exp(-r*tau)

def put_price(k, x, tau, sigma, r = 0):
	return _Phi(-bs_d2(k, x, tau, sigma, r))*k*np.exp(-r*tau) - _Phi(-bs_d1(k, x, tau, sigma, r))*x
```

- Put-Call Parity:
  - The difference between a call and a put is expressed in terms of the value of the asset in the future.
$$
\begin{align}
 C - P = &S_{0} - e^{-rT}K \\
(S_{T}-K)^{+} - (K - S_{T})^{+} =& S_{T} - K \\
\end{align}
$$


```{python}
fig, ax = plt.subplots(2, 2, figsize = (12, 7), constrained_layout = True)
fig.suptitle("Option Expiration Example (06-18-2020). Underlying price: %f.\n Today is 05-10-2020"% X[X.base == "H&H_underlying"].last_deal)

ax = ax.flatten()

for i, (expir, t) in enumerate(product(["2021-05-20", "18-16-20"], ["Call", "Put"])):
    Y = X[(X.base == "H&H") & (X.exp == expir) & (X.type == t) & (X.last_deal > 0)]
    Y.plot.scatter("strike", "last_deal", ax = ax[i], color = "b")
    fut_price = Y.iloc[0].underlying_price
    ax[i].set_title(f"Option {"call" if t == "Call" else "put"}, expiration {expir}")

    if (i < 2):
      # Sets expiration 21-05-2020
        ax[i].set_xlabel("")
	else:
		ax[i].set_xlabel("Strike")

	if (i % 2 == 0):
		ax[i].set_ylabel("Option price\n(last trade)")
		K = np.linspace(70, 90, 100)
		ax[i].plot(K, ma.maximum(fut_price - K, 0), "r", alpha = 0.5)
		ax[i].set_xlim(70, 90)
		ax[i].set_ylim(-0.2, 4)
		ax[i].set_xticks(np.arange(70, 90.1, 400))
	else:
		ax[i].set_ylabel("")
		K = np.linspace(65, 80, 100)
		ax[i].plot(K, ma.maximum(K - fut_price, 0), "r", alpha = 0.5)
		ax[i].set_xlim(67, 80)
		ax[i].set_ylim(-0.2, 4)
		ax[i].set_xticks(np.arange(68, 80.1, 400))

```

## Greeks
**Option Greeks**: The sensitivity coefficients of the option price to various factors (underlying price, volatility, time to expiry, etc)
- Delta: The approximate probability of execution or underlying asset exposure (aka the first derivative of price, or the amount the option moves per $1 move in underlying)
- Gamma: The risk that the price may go into a vertical drop or possibly rapidly accumulate profit for a position. It is the second derivative of price, first derivative of delta.
- Theta: How much the option decays due to the passage of time. It is the first derivative of time.


Using taylor series decomposition the values of the greeks sum up to the value of the option as such:


$V(S + ΔS, τ - Δτ, r + Δr, σ + Δσ) - V(S, \tau, r, \sigma) = $
$ \frac{δV}{δS}ΔS - \frac{δV}{δτ}Δτ + \frac{δV}{δr}Δr + \frac{δV}{δσ}Δσ + \frac{δ^{2}V}{δS^{2}}(ΔS)^{2} + \..$
$$
\begin{align}
\text{Taylor Series Approximation}
\end{align}
$$