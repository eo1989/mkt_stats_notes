---
title: "Essentials of Options Trading (IV & Greeks)"
date: "06/25/2023"
author: "Ernest Orlowski"
format:
  html:
    code-folding: true
  pdf:
    toc: true
    number-selections: true
    colorlinks: true
jupyter: py3125_base
execute:
  enabled: true
  freeze: auto  # re-render only when source changes
fig-cap-location: margin
reference-location: margin
---
```{python}
# import numpy as np
# from numpy import ma
import matplotlib.pyplot as plt
import pandas as pd
from itertools import product
# from scipy import stats
# from scipy.optimize import newton

import jax
import jax.numpy as jnp
import jax.scipy.special as sp
import jax.scipy.optimize as opt

```
Using data from ![data](../data/option_sample_data.csv) the following code will be used to calculate everything needed in this demo.

# Refresher:
$$
\begin{aligned}
& \diamondsuit \text{BSM Formula} \diamondsuit \\
& C = S_{0}\phi(d_{1})- e^{-rT}K\phi(d_{2}) \\
& P = e^{-rT}K\phi(-d_{2})-S_{0}\phi(-d_{1}) \\
& \text{where:} \\
& d_{1} = \frac{1}{\sigma\sqrt{T}}\big(ln\frac{S_{0}}{K}+(r+\frac{\sigma^{2}}{2})T), \\
& d_{2} = \frac{1}{\sigma\sqrt{T}}\big(ln\frac{S_{0}}{K}+(r-\frac{\sigma^{2}}{2})T) \\
\end{aligned}
$$
It is one of the fastest formulas used to estimate the approximate premium of an option. The code to create it is:
```{python}
# Using jax instead

"""Std Norm Distribution function && Density"""

# _Phi = stats.norm.cdf
# _phi = stats.norm.pdf

"""
Notation:
    v: option price
    k: strike
    x: price of underlying stock/asset
    tau: time to expiry
    r: interest rate
    sigma: volatility of underlying
"""

# def bs_d1(k, x, tau, sigma, r = 0):
# 	return 1/(sigma*np.sqrt(tau)) * (np.log(x/k) + (r + sigma**2/2)*tau)

# def bs_d2(k, x, tau, sigma, r = 0):
# 	return bs_d1(k, x, tau, sigma, r) - sigma*np.sqrt(tau)

# def call_price(k, x, tau, sigma, r = 0):
# 	return _Phi(bs_d1(k, x, tau, sigma, r))*x - _Phi(bs_d2(k, x, tau, sigma, r))*k*np.exp(-r*tau)

# def put_price(k, x, tau, sigma, r = 0):
# 	return _Phi(-bs_d2(k, x, tau, sigma, r))*k*np.exp(-r*tau) - _Phi(-bs_d1(k, x, tau, sigma, r))*x


## Changed it to the jax implementation.
# TODO: Implement type annotations for all the variables and return types.
# def norm_cdf(x):
# 	return (1 + sp.erf(x / jnp.sqrt(2))) / 2

# def call_price(S, K, dte, ir, vol):
# 	vol = vol / jnp.sqrt(365.25) / 100
# 	sqrt_time = jnp.sqrt(dte)
# 	d1 = (jnp.log(S / K) + (ir + jnp.square(vol) / 2) * dte) / (vol * sqrt_time)
# 	d2 = d1 - vol*sqrt_time
# 	return (S * norm_cdf(d1) - K*jnp.exp(-ir*dte) * norm_cdf(d2))

# def put_price(S, K, dte, ir, vol):
# 	return K*jnp.exp(-ir*dte) - S + call_price(S, K, dte, ir, vol)

# def _call_prices(S, K, dte, ir, vol):
# 	T = dte / 365.0
# 	d1 = (jnp.log(S/K) + (ir + 0.5*vol**2)*T) / (vol * jnp.sqrt(T))
# 	d2 = d1 - vol*jnp.sqrt(T)
# 	call_price = S * norm_cdf(d1) - K * jnp.exp(-ir*T) * norm_cdf(d2)
# 	return call_price

# _S = jnp.array([150, 155, 160])
# _K = 155
# _dte = 7
# _ir = 0.0525
# _vol = 21.3 / 100

# compute the vjp for _call_price
# NOTE: jax.vjp returns a function that computes the vector-Jacobian product
# def compute_delta_single_prices(S):
# 	_, vjp_fun = jax.vjp(_call_price, _S, _K, _dte, _ir, _vol)
# 	return vjp_fun(jnp.array(1.0))[0]

# elementwise_compute_delta = jax.vmap(compute_delta_single_prices, in_axes=(0, ))

# _deltas = elementwise_compute_delta(_S)
# print(_deltas)

# _delta = jax.grad(call_price, argnums=2)
# _dellta = jax.vjp(call_price, argnums = 2)
# _dellta = jax.vjp(call_price(S=_S, K=_K, dte=_dte, ir = _ir, vol = _vol))
# dellta = jax.vjp(call_price(_S, _K, _dte, _ir, _vol))
# delta = jax.vmap(_dellta, in_axes=(0, None, None, None, None))

# deltas = delta(S, K, dte, ir, vol)
# deltas = elementwise_compute_delta(_S)
# print(f"Deltas: {deltas}")
# test it out.
# import pytest
# @pytest.mark.parametrize("S, K, expected", [(100, 100, 5.94), (100, 110, 0.01), (100, 90, 10.00)])
# def test_call_price(S, K, expected):
# 	assert (call_price(S, K, 30, 0.01, 0.2) - expected) < 0.01
# test
import numpy as np
from scipy.stats import norm

def call_option_price(S, K, T, r, sigma):
    """
    Compute the Black-Scholes price of a call option.

    Parameters:
    - S: Current stock price
    - K: Strike price of the option
    - T: Time to expiration in years
    - r: Risk-free interest rate
    - sigma: Volatility of the underlying asset

    Returns:
    - Call option price
    """
    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    call_price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    return call_price

def call_option_delta(S, K, T, r, sigma):
    """
    Compute the Delta of a call option.

    Parameters:
    - S: Current stock price
    - K: Strike price of the option
    - T: Time to expiration in years
    - r: Risk-free interest rate
    - sigma: Volatility of the underlying asset

    Returns:
    - Delta of the call option
    """
    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    delta = norm.cdf(d1)
    return delta

# Example usage
K = np.array([150, 155, 160])  # strikes prices
S = 157.83  # stock price
dte = 7  # Days to expiration
T = dte / 365.0  # Convert days to years
r = 0.0525  # Risk-free interest rate
sigma = 21.3 / 100  # Volatility

# Compute Delta for each stock price
deltas = np.vectorize(call_option_delta)(S, K, T, r, sigma)
print(deltas)


```

- Put-Call Parity:
  - The difference between a call and a put is expressed in terms of the value of the asset in the future.


```{python}
fig, ax = plt.subplots(2, 2, figsize=(12, 7), constrained_layout=True)
fig.suptitle(
    "Option Expiration Example (06-18-2020). Underlying price: %f.\n Today is 05-10-2020"
    % X[X.base == "H&H_underlying"].last_deal
)

ax = ax.flatten()

for i, (expir, t) in enumerate(product(["2021-05-20", "18-16-20"], ["Call", "Put"])):
    Y = X[(X.base == "H&H") & (X.exp == expir) & (X.type == t) & (X.last_deal > 0)]
    Y.plot.scatter("strike", "last_deal", ax=ax[i], color="b")
    fut_price = Y.iloc[0].underlying_price
    ax[i].set_title(f"Option {"call" if t == "Call" else "put"}, expiration {expir}")

    if i < 2:
        # Sets expiration 21-05-2020
        ax[i].set_xlabel("")
    else:
        ax[i].set_xlabel("Strike")

    if i % 2 == 0:
        # Call
        ax[i].set_ylabel("Option price\n(last trade)")
        K = np.linspace(70, 90, 100)
        ax[i].plot(K, ma.maximum(fut_price - K, 0), "r", alpha=0.5)
        ax[i].set_xlim(70, 90)
        ax[i].set_ylim(-0.2, 4)
        ax[i].set_xticks(np.arange(70, 90.1, 400))
    else:
        # Put
        ax[i].set_ylabel("")
        K = np.linspace(65, 80, 100)
        ax[i].plot(K, ma.maximum(K - fut_price, 0), "r", alpha=0.5)
        ax[i].set_xlim(67, 80)
        ax[i].set_ylim(-0.2, 4)
        ax[i].set_xticks(np.arange(68, 80.1, 400))

```

## Greeks
__Option Greeks__: The sensitivity coefficients of the option price to various factors (underlying price, volatility, time to expiry, etc)
- Delta: The approximate probability of execution or underlying asset exposure (aka the first derivative of price, or the amount the option moves per $1 move in underlying)
- Gamma: The risk that the price may go into a vertical drop or possibly rapidly accumulate profit for a position. It is the second derivative of price, first derivative of delta.
- Theta: How much the option decays due to the passage of time. It is the first derivative of time.


Using taylor series decomposition the values of the greeks sum up to the value of the option as such:
$$
\begin{align}
 C - P = &S_{0} - e^{-rT}K \\
(S_{T}-K)^{+} - (K - S_{T})^{+} =& S_{T} - K \\
\end{align}
$$


$$
\begin{align}
& \text{Taylor Series Approximation:} \\
& V(S + Δ S, τ - Δτ, r + Δr, σ + Δσ) - V(S, τ, r, σ) \\
& \frac{ΔV}{ΔS}ΔS - \frac{δV}{δτ}δτ + \frac{δV}{δr}Δr + \frac{δV}{δσ}Δσ + \frac{δ^{2}V}{δS^{2}}(ΔS)^{2} + ...\\
\end{align}
$$
